from typing import List

import cv2
import numpy as np
import os


# Function to extract features using ORB (or SIFT if needed)
from cv2 import DMatch



def extract_features(image):
    orb = cv2.ORB_create()  # You can use cv2.SIFT_create() if you have the appropriate OpenCV version
    keypoints, descriptors = orb.detectAndCompute(image, None)
    return keypoints, descriptors


# Function to match features between two images
def match_images(img1, img2):
    # Extract features from both images
    keypoints1, descriptors1 = extract_features(img1)
    keypoints2, descriptors2 = extract_features(img2)

    # Use Brute Force Matcher to find best matches
    bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    matches = bf.match(descriptors1, descriptors2)

    # Sort the matches based on their distance (lower distance means better match)
    matches = sorted(matches, key=lambda x: x.distance)

    return matches, keypoints1, keypoints2


# Function to draw matches
def draw_matches(img1, img2, matches, keypoints1, keypoints2):
    img_matches = cv2.drawMatches(img1, keypoints1, img2, keypoints2, matches[:30], None,
                                  flags=cv2.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)
    return img_matches


# Load the dataset of images
def load_dataset(dataset_folder):
    images = []
    for filename in os.listdir(dataset_folder):
        if filename.endswith(('.png', '.jpg', '.jpeg')):
            img_path = os.path.join(dataset_folder, filename)
            img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
            images.append((filename, img))
    return images



def find_best_match(query_image_path, dataset_folder):
    query_image = cv2.imread(query_image_path, cv2.IMREAD_GRAYSCALE)  # Read query image in grayscale
    dataset_images = load_dataset(dataset_folder)

    best_match = None
    best_matches_count = 0
    best_img_name = ""

    for img_name, dataset_img in dataset_images:
        # Match query image with current dataset image
        matches, kp1, kp2 = match_images(query_image, dataset_img)
        match_count = len(matches)

        # Update best match if more matches are found
        if match_count > best_matches_count:
            best_matches_count = match_count
            best_match = dataset_img
            best_img_name = img_name

    return best_img_name, best_match


# Example usage
query_image_path = 'path_to_query_image.jpg'
dataset_folder = 'path_to_dataset_folder'

best_img_name, best_match = find_best_match(query_image_path, dataset_folder)

print(f"The best match is: {best_img_name}")

# Visualizing the match (optional)
if best_match is not None:
    query_image = cv2.imread(query_image_path, cv2.IMREAD_GRAYSCALE)
    best_match_image = cv2.imread(os.path.join(dataset_folder, best_img_name), cv2.IMREAD_GRAYSCALE)
    matches: list[DMatch]
    matches, kp1, kp2 = match_images(query_image, best_match_image)
    img_matches = draw_matches(query_image, best_match_image, matches, kp1, kp2)

    # Display the matched image
    cv2.imshow("Best Match", img_matches)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
def load_dataset(dataset_folder):
    images = []
    for filename in os.listdir(dataset_folder):
        if filename.endswith(('.png', '.jpg', '.jpeg')):
            img_path = os.path.join(dataset_folder, filename)
            img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
            if img is not None:
                images.append((filename, img))
            else:
                print(f"Warning: Could not load image {filename}")
    return images
for img_name ,dataset_img in dataset_images:
    matches ,kp1,kp2 =match_images(query_image , dataset_img)
if not matches:
    print(f"No matches found between {query_image_path} and {img_name}")

    # Update best match if more matches are found
    if match_count > best_matches_count:
        best_matches_count = match_count
        best_match = dataset_img
        best_img_name = img_name
